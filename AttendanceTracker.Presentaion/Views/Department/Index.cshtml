@model IEnumerable<AttendanceTracker.Business.DTO.DepartmentDTO>

@{
    ViewData["Title"] = "Department Management";
}

<h2 class="text-center my-4">Department Management</h2>

<div class="container">
    <!-- Department Form -->
    <form id="departmentForm" class="border p-4 mb-4">
        <input type="hidden" id="deptId" />
        <div class="mb-3">
            <label for="deptName" class="form-label">Department Name</label>
            <input type="text" class="form-control" id="deptName" placeholder="e.g., Human Resources" required />
        </div>
        <div class="mb-3">
            <label for="deptCode" class="form-label">Department Code</label>
            <input type="text" class="form-control" id="deptCode" placeholder="e.g., HRMG" maxlength="4" required />
        </div>
        <div class="mb-3">
            <label for="deptLocation" class="form-label">Location</label>
            <input type="text" class="form-control" id="deptLocation" placeholder="e.g., Cairo Office" required maxlength="100" />
        </div>
        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-secondary" onclick="clearForm()">Clear</button>
    </form>

    <!-- Department Table -->
    <table class="table table-striped table-bordered">
        <thead class="table-dark">
            <tr>
                <th>Name</th>
                <th>Code</th>
                <th>Location</th>
                <th># Employees</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody id="departmentTable">
            @foreach (var dept in Model)
            {
                <tr data-id="@dept.Id">
                    <td>@dept.Name</td>
                    <td>@dept.Code</td>
                    <td>@dept.Location</td>
                    <td>@dept.EmployeeCount</td>
                    <td>
                        <button class="btn btn-sm btn-warning editBtn">Edit</button>
                        <button class="btn btn-sm btn-danger deleteBtn">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>


@section Scripts {
    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <!-- Full script (validation + actions) -->
    <script>
        // Global variables for better state management
        let isSubmitting = false;
        let isDeleting = false;

        // Show loading indicator
        function showLoading(message = "Processing...") {
            if (!$("#loadingOverlay").length) {
                $("body").append(`
                    <div id="loadingOverlay" class="loading-overlay">
                        <div class="loading-content">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <div class="mt-2">${message}</div>
                        </div>
                    </div>
                `);
            }
        }

        // Hide loading indicator
        function hideLoading() {
            $("#loadingOverlay").remove();
        }

        // Show success message
        function showSuccess(message) {
            if (!$("#successAlert").length) {
                $("body").append(`
                    <div id="successAlert" class="alert alert-success alert-dismissible fade show success-alert">
                        <i class="fas fa-check-circle"></i> ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                `);
            }
        }

        // Refresh page with success message
        function refreshWithSuccess(message) {
            showSuccess(message);
            setTimeout(() => {
                location.reload();
            }, 1000);
        }

        async function isUniqueName(name) {
            return await $.get("/Department/IsNameUnique", { name });
        }

        async function isUniqueCode(code) {
            return await $.get("/Department/IsCodeUnique", { code });
        }

        function clearForm() {
            $("#deptId").val('');
            $("#deptName").val('');
            $("#deptCode").val('');
            $("#deptLocation").val('');
            // Change button text back to "Save" and enable it
            $("button[type='submit']").prop('disabled', false).text("Save");
        }

        $("#departmentForm").on("submit", async function (e) {
            e.preventDefault();

            if (isSubmitting) return; // Prevent double submission
            isSubmitting = true;

            const id = $("#deptId").val();
            const name = $("#deptName").val().trim();
            const code = $("#deptCode").val().trim().toUpperCase();
            const location = $("#deptLocation").val().trim();

            // Validation
            if (name.length < 3 || name.length > 50) {
                alert("Name must be between 3 and 50 characters.");
                isSubmitting = false;
                return;
            }

            if (!/^[A-Z]{4}$/.test(code)) {
                alert("Code must be exactly 4 uppercase letters.");
                isSubmitting = false;
                return;
            }

            if (location.length === 0 || location.length > 100) {
                alert("Location must be less than or equal to 100 characters.");
                isSubmitting = false;
                return;
            }

            const submitBtn = $("button[type='submit']");
            submitBtn.prop('disabled', true).text('Processing...');
            showLoading(id ? "Updating department..." : "Creating department...");

            try {
                let nameValid = true;
                let codeValid = true;

                if (id) {
                    const row = $("tr[data-id='" + id + "']");
                    const originalName = row.find("td:eq(0)").text().trim();
                    const originalCode = row.find("td:eq(1)").text().trim();

                    if (name !== originalName) nameValid = await isUniqueName(name);
                    if (code !== originalCode) codeValid = await isUniqueCode(code);
                } else {
                    nameValid = await isUniqueName(name);
                    codeValid = await isUniqueCode(code);
                }

                if (!nameValid) {
                    hideLoading();
                    alert("Department name must be unique.");
                    isSubmitting = false;
                    return;
                }

                if (!codeValid) {
                    hideLoading();
                    alert("Department code must be unique.");
                    isSubmitting = false;
                    return;
                }

                const data = {
                    Id: id,
                    Name: name,
                    Code: code,
                    Location: location
                };

                const url = id ? "/Department/Update" : "/Department/Create";

                $.ajax({
                    type: "POST",
                    url: url,
                    data: data,
                    success: function (response) {
                        hideLoading();
                        const message = id ? "Department updated successfully!" : "Department created successfully!";
                        refreshWithSuccess(message);
                    },
                    error: function (xhr, status, error) {
                        hideLoading();
                        submitBtn.prop('disabled', false).text(id ? 'Update' : 'Save');
                        console.error("Error:", error);
                        alert("An error occurred while saving the department. Please try again.");
                        isSubmitting = false;
                    }
                });
            } catch (error) {
                hideLoading();
                submitBtn.prop('disabled', false).text(id ? 'Update' : 'Save');
                console.error("Error:", error);
                alert("An error occurred. Please try again.");
                isSubmitting = false;
            }
        });

        $(".editBtn").on("click", function () {
            const row = $(this).closest("tr");
            const id = row.data("id");
            const name = row.find("td:eq(0)").text().trim();
            const code = row.find("td:eq(1)").text().trim();
            const location = row.find("td:eq(2)").text().trim();

            $("#deptId").val(id);
            $("#deptName").val(name);
            $("#deptCode").val(code);
            $("#deptLocation").val(location);

            // Change button text to "Update"
            $("button[type='submit']").text("Update");

            // Scroll to form
            $("#departmentForm")[0].scrollIntoView({ behavior: 'smooth' });
        });

        $(".deleteBtn").on("click", function () {
            if (isDeleting) return; // Prevent double deletion

            const row = $(this).closest("tr");
            const id = row.data("id");
            const name = row.find("td:eq(0)").text().trim();

            if (confirm(`Are you sure you want to delete the department "${name}"?`)) {
                isDeleting = true;
                showLoading("Deleting department...");

                $.ajax({
                    type: "POST",
                    url: "/Department/Delete",
                    data: { id },
                    success: function (response) {
                        hideLoading();
                        refreshWithSuccess("Department deleted successfully!");
                    },
                    error: function (xhr, status, error) {
                        hideLoading();
                        console.error("Error:", error);
                        alert("An error occurred while deleting the department. Please try again.");
                        isDeleting = false;
                    }
                });
            }
        });

        // Auto-hide success alerts after 5 seconds
        $(document).on('click', '.btn-close', function() {
            $(this).closest('.alert').remove();
        });

        // Clear form when page loads
        $(document).ready(function() {
            clearForm();
        });
    </script>
}
